***[Shell]*** Done:
-------------------------	
		* 	BUG:		корректный подсчет номера билда
		* 	OPT:ieLog:	std::FILE* > std::ofstream
		*	OPT:		PCH
		*	OPT:		избавиться от singleton ( 1 Jun 2018: где он не нужен )
		* 	BUG:		фиксить загрузку\выгрузку файлов в CFileSystem
		* 	NEW:		класс core с аргументами командной строки
		*	NEW:		организация решение (проекты, директории)?	
		*	CP: 		убрать вин32 типы
		*	OPT:		COMPLETE solution review
		*	CP:			new cross-platform approach
		* 	NEW:		port to x64... ( not a single error! i think they're hiding >:P )
		*	NEW			вынести базовые хидеры в папку с движком ( из коре )
		*	NEW:		PIMPL
		*  	OPT:		перейьти на новый стиль кода...
		*	BUG:		multiple inheritance и CP API и память ( r_open, r_close )
		*	BUG:		разыменование mdbg.eng( ) при деаллоке, хотя там нужен был P	
		* 	NEW:		собрался на линукс!
		*   BUG: 		проверять, существует ли gamedata ( в велосипедной FS )
		*	BUG: 		убрать '*' из полного путя вин
		*	OPT:		_cpuid - features and cores
		*	OPT:		корректно пересесть на pure gnuc, ( чекать версию, а не PURE_GNUC! )
		*	NEW:		сделал окно для сатисфакции, без мэин цикла его вставлять в архитектуру движка рановато
		* 	NEW:		opengl: freeglut, glew, glfw
		
***[Shell]*** In progress:
-------------------------
		1. 		shared_ptr...
		2.		inex::filesystem.......
		5.		отформатировать кроссплатформ код, пока нагло стоят заглушки
		6.		стек дамп.. пока только линукс и вин32 ( msvc only )
		7.		гитхаб

		------------- не нравится и вааще впадло ---------------------
		---P	залинковать гл статически на всех мингв
		--------------------------------------------------------------
		
		bugs/features:
		*	BUG: использовать биты char [] в get_cpu_fts()

		to think:
		* 	threading: atomic isn't always int. but can use static_asserts to determine if it is or dunno
		*	в инициализации фс, под линуксом можно юзать оба варианта: "gamedata/", "./gamedata/"

***[Shell]*** TODO:
---------------------------
		* ie_core: менять дни февраля в зависимости от высокосности года в массиве days_in_month
		* fs_iterator operator ++: не чекать на сисдиректории внутри
		* fs_iterator: убрать m_end а юзать m_entry для этого
		* fs_internal: обойтись без заглушек для платформы
		* профайлер и поисковик утечек:
			valgrind valgrind.org,
			perf eax.me,
			heaptrack eax.me,
			memorysanitizer http://clang.llvm.org/docs/MemorySanitizer.html
			http://clang.llvm.org/diagnostics.html
			data race Helgrind
			strace ltrace
			flamegraph eax
		* file_pa
		* OBJ file loader ( Python script to export custom JSON files from Blender. C++ JSON )
		* сделать классы для лога\рендердевайса, а вдруг их понадобится два
		* использовать полный список namespaces, inex::core::log, а не просто лог
		* сделать Msg ( и lowercase ) глобальным для inex namespace
		* вынести все инлайны в *_inline.h файлы	-> не всегда это лучший кейс
		* debug memory manager
		* copy-on-write/shared str
		* PDB
		* leak detector or something

		bugs/features:
		* preferred separator for path_string

		to think:
		
		* 	выпилить из таргетов исходы другиъ платформ
		*	непрерывная интеграция ( Jenkins )
			
		* 	метод с наследованием от платформозависимого интерфейса вааще
			платформозависимый костыльныя. хотя, мой код такой же. апдейтну потом...
		*	consider some ways of how to store platform-specific code?? ( pimpl, inheritance, or just conditional compilation )
		*	https://gitlab.com/gitlab-org repository
		*	get rid of all the inline assembly? (intrinsics  rules?)
		*	типы сообщений лога? warning, error, etc.
		*   использовать типа ie_memcpy or ie_memset и там чекать type_traits в дебаге. typeid ???
		*	encrypting / decrypting data
		*	serialization
		*	reflection data
		*	pool alloc, doug lea alloc, region-based memory, jemalloc, ptmalloc-implementation
		*	store binaries in one folder
		* 	почитать про как дампить программу
		* 	структуры данных: unrolled linked list, R-tree, Quadtree,Red-black tree
		*	алгоритмы: дихотомия
		*	циклический избыточный код (CRC)
		*	global illumination
		*	тут о том, что GC не нужен, а нужен shared_ptr
			https://www.gamedev.net/forums/topic/631744-garbage-collector/
		*	о сети
			https://gafferongames.com/post/udp_vs_tcp/
			и в книгах (Programming Abstractions in C++ or Stephen Rod)
		* 	gamedev blog
			https://preshing.com
		* 	прочитать про fold

		https://nazva.net/; http://www.braingames.ru; https://leetcode.com/; https://www.careercup.com/
		
		очень большой кусок:
			window, engine api...
		
***[ Shell ]*** Notes:
		* 	ЛИБЫ в командной строке должны идти до сорцев и объектов!

		* 	кроссплатформ штуки:
			1. если имплементация немного отличается, а интерфейс одинаков
				юзай разные файлы имплементации
			2.	выноси независимые штуки в отдельный файл
			3. 	не называй типы с префиксом платфорым
		
		* 	по поводу енджин: он должен содержать включать ренддер
			в вин32 он еще и дллкой делается. тогда сделать типа енджинапи для лин и вин 
			и гейм тоже так же...
			рендер синглетон, еще есть рендер фактори
			и у рендера есть дллмаин и там они аттачат енджин
			вместо класс апликейшн - енджин, виндов в енджин прожекте и юзает рендер штоле
			
		*	класс текстуры и реализация под рендера своя. имадж манажер который управляет этой лабудой
		
посмотреть seinfeld
Thank_You_for_Smoking
Infinity
look around you
посмотреть сериал https://watcheng.com/en/show/lip-service/season-1/episode-1/

my skype ( i think ): live:2c92e80bf2975880