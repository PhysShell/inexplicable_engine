***[Shell]*** Done:
-------------------------	
		* 	BUG:		корректный подсчет номера билда
		* 	OPT:ieLog:	std::FILE* > std::ofstream
		*	OPT:		PCH
		*	OPT:		избавиться от singleton ( 1 Jun 2018: где он не нужен )
		* 	BUG:		фиксить загрузку\выгрузку файлов в CFileSystem
		* 	NEW:		класс core с аргументами командной строки
		*	NEW:		организация решение (проекты, директории)?	
		*	CP: 		убрать вин32 типы
		*	OPT:		COMPLETE solution review
		*	CP:			new cross-platform approach
		* 	NEW:		port to x64... ( not a single error! i think they're hiding >:P )
		*	NEW			вынести базовые хидеры в папку с движком ( из коре )
		*	NEW:		PIMPL
		*  	OPT:		перейьти на новый стиль кода...
		*	BUG:		multiple inheritance и CP API и память ( r_open, r_close )
		*	BUG:		разыменование mdbg.eng( ) при деаллоке, хотя там нужен был P	
		* 	NEW:		собрался на линукс!
		*   BUG: 		проверять, существует ли gamedata ( в велосипедной FS )
		*	BUG: 		убрать '*' из полного путя вин
		*	OPT:		_cpuid - features and cores
		*	OPT:		корректно пересесть на pure gnuc, ( чекать версию, а не PURE_GNUC! )
		*	NEW:		сделал окно для сатисфакции, без мэин цикла его вставлять в архитектуру движка рановато
		* 	NEW:		opengl: freeglut, glew, glfw
		* 	NEW: 		shared_ptr ( mostly done )
		*	NEW:		базовая файлсистем
		* 	NEW:		репозиторий на гитхаб
		* 	NEW:		выпилить из таргетов исходы другиъ платформ
        *   NEW:        rust static lib вызывающаяся из ++ кода ( удалил )
        *   BUG:        переписал general_allocator у К&Р по-сути
		* 	NEW:		benchmarking
		*	NEW:		float4x4

***[Shell]*** In progress:
-------------------------
		1.		отформатировать кроссплатформ код, пока нагло стоят заглушки
		2.		стек дамп.. пока только линукс и вин32 ( msvc )
		3.		выкинуть глфв3 и заюзать апи платформы


		------------- не нравится и вааще впадло ---------------------
		---P	сборка на смаке и вин64
		--------------------------------------------------------------
		
		bugs/features:
		*	BUG: использовать биты char [] в get_cpu_fts()

		to think:

***[Shell]*** BUGS:
        * fs_file_system: сет ммф не все файлы добавляет
        * fs_file_system: валится, когда ммф ~1020

***[Shell]*** TODO:
---------------------------
		* ie_core: менять дни февраля в зависимости от высокосности года в массиве days_in_month
		* fs_iterator operator ++: не чекать на сисдиректории внутри
		* fs_iterator pimpl: сделать правильно, хотя б инеклюдь в импл.х
		* fs_iterator: убрать m_end а юзать m_entry для этого
		* fs_internal: обойтись без заглушек для платформы
		* hw_wrapper_gl4: сделать context_resolver а не тупые макро
		* профайлер и поисковик утечек:
			valgrind valgrind.org,
			perf eax.me,
			heaptrack eax.me,
			memorysanitizer http://clang.llvm.org/docs/MemorySanitizer.html
			http://clang.llvm.org/diagnostics.html
			data race Helgrind
			strace ltrace
			flamegraph eax
		* file_pa
		* сделать классы для лога\рендердевайса, а вдруг их понадобится два
		* вынести все инлайны в *_inline.h файлы	-> не всегда это лучший кейс
		* debug memory manager
		* copy-on-write/shared str
		* PDB
		* leak detector or something
		* sound: add something like sound_fx_reverb (emulates the space acoustic effect, sound_fx_eq (equalizer, can have array of bands class which has properties like frequency, range, amplitude, maybe provide simple automation;
		* log: add log initiator template (in progress) and use it instead of manually writing [render_base], [gl4]. think of method like set_custom_log_initiator for overriding it;
		* thread callstack guarantee

		bugs/features:
		* preferred separator for path_string

		to think:
		*	непрерывная интеграция ( Jenkins )
			
		* 	метод с наследованием от платформозависимого интерфейса вааще
			платформозависимый костыльныя. хотя, мой код такой же. апдейтну потом...
		*   использовать типа ie_memcpy or ie_memset и там чекать type_traits в дебаге. typeid ???
		*	reflection data
		*	pool alloc, doug lea alloc, region-based memory, jemalloc, ptmalloc-implementation
		* 	структуры данных: unrolled linked list, R-tree, Quadtree,Red-black tree
		*	алгоритмы: дихотомия
		*	о сети
			https://gafferongames.com/post/udp_vs_tcp/
			и в книгах (Programming Abstractions in C++ or Stephen Rod)
		* 	gamedev blog
			https://preshing.com
		* 	прочитать про fold
				
		очень большой кусок:
			window, engine api...
		
***[ Shell ]*** Notes:
