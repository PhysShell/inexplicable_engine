gl4_external.h ON GLEW CONTENTS
////////////////////////////////////////////////////////////////////////////
//	Created 	: 23.06.2019
//	Author		: Feudor Shelipov
////////////////////////////////////////////////////////////////////////////

#ifndef GL4_EXTERNAL_H_INCLUDED
#   define GL4_EXTERNAL_H_INCLUDED

//typedef ptrdiff_t GLintptr;
//typedef ptrdiff_t GLsizeiptr;
#	include <GL/glew.h>
// #include <GL/glx.h>
// #include <GL/gl.h>
// #include <GL/glext.h>
// #include <GL/glxext.h>


		/**************************************		Global extension	/**************************************/
// Context
struct GLFWwindow;
extern GLFWwindow		*		g_gl4_context;

// // Texture
// extern PFNGLACTIVETEXTUREARBPROC	glActiveTexture;
// // VAO
// extern PFNGLGENVERTEXARRAYSPROC   	glGenVertexArrays;
// extern PFNGLDELETEVERTEXARRAYSPROC 	glDeleteVertexArrays;
// extern PFNGLBINDVERTEXARRAYPROC    	glBindVertexArray;
// // VBO
// extern PFNGLGENBUFFERSPROC    	glGenBuffers;
// extern PFNGLDELETEBUFFERSPROC 	glDeleteBuffers;
// extern PFNGLBINDBUFFERPROC		glBindBuffer;
// extern PFNGLBUFFERDATAPROC    	glBufferData;
// extern PFNGLBUFFERSUBDATAPROC 	glBufferSubData;
// extern PFNGLMAPBUFFERPROC     	glMapBuffer;
// extern PFNGLUNMAPBUFFERPROC   	glUnmapBuffer;
// // Shaders
// extern PFNGLCREATEPROGRAMPROC     	glCreateProgram;
// extern PFNGLDELETEPROGRAMPROC     	glDeleteProgram;
// extern PFNGLLINKPROGRAMPROC       	glLinkProgram;
// extern PFNGLVALIDATEPROGRAMPROC   	glValidateProgram;
// extern PFNGLUSEPROGRAMPROC        	glUseProgram;
// extern PFNGLGETPROGRAMIVPROC      	glGetProgramiv;
// extern PFNGLGETPROGRAMINFOLOGPROC 	glGetProgramInfoLog;
// extern PFNGLCREATESHADERPROC      	glCreateShader;
// extern PFNGLDELETESHADERPROC      	glDeleteShader;
// extern PFNGLSHADERSOURCEPROC      	glShaderSource;
// extern PFNGLCOMPILESHADERPROC     	glCompileShader;
// extern PFNGLATTACHSHADERPROC      	glAttachShader;
// extern PFNGLDETACHSHADERPROC      	glDetachShader;
// extern PFNGLGETSHADERIVPROC       	glGetShaderiv;
// extern PFNGLGETSHADERINFOLOGPROC  	glGetShaderInfoLog;
// // Attributes
// extern PFNGLGETATTRIBLOCATIONPROC        glGetAttribLocation;
// extern PFNGLVERTEXATTRIBPOINTERPROC      glVertexAttribPointer;
// extern PFNGLENABLEVERTEXATTRIBARRAYPROC  glEnableVertexAttribArray;
// extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
// // Uniforms
// extern PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
// extern PFNGLUNIFORMMATRIX3FVPROC   	glUniformMatrix3fv;
// extern PFNGLUNIFORMMATRIX4FVPROC   	glUniformMatrix4fv;
// extern PFNGLUNIFORM1FPROC          	glUniform1f;
// extern PFNGLUNIFORM1IPROC          	glUniform1i;
// extern PFNGLUNIFORM1FVPROC         	glUniform1fv;
// extern PFNGLUNIFORM2FPROC			glUniform2f;
// extern PFNGLUNIFORM3FVPROC         	glUniform3fv;
// extern PFNGLUNIFORM3FPROC          	glUniform3f;
// extern PFNGLUNIFORM4FVPROC         	glUniform4fv;

#endif // GL4_EXTERNAL_H_INCLUDED

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	glfwSetErrorCallback( error_callback );
	// glfwSetKeyCallback( window, key_callback );
	VERIFY				( glfwInit( ) );

	glfwWindowHint(GLFW_SAMPLES, 4); // 4x antialiasing
	//glfwDefaultWindowHints( );

	glfwWindowHint		( GLFW_CONTEXT_VERSION_MAJOR, 3 );
    glfwWindowHint		( GLFW_CONTEXT_VERSION_MINOR, 3 );
    glfwWindowHint		( GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE );
	glfwWindowHint		( GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE );

	// Create the device
	g_gl3_context		= glfwCreateWindow( size_x, size_y, "__INEX__", nullptr, nullptr );
	LOGGER          ( "* '%s' window: initial config: [%d x %d]", "__INEX__", size_x, size_y );
	ASSERT_D        ( g_gl3_context, "Couldn't create window and its OpenGL context." );
	glfwMakeContextCurrent( g_gl3_context );

	VERIFY			( initialize_extensions( ) );
	// Display the name of video board
	s32 gl_major	= -1;
	s32 gl_minor	= -1;
    glGetIntegerv	( GL_MAJOR_VERSION, &gl_major );
    glGetIntegerv	( GL_MINOR_VERSION, &gl_minor );
	ASSERT_D		( ( gl_major != -1 ) || ( gl_minor != -1 ), "opengl fcked up" );

    LOGGER			(
		"* [hw_wrapper]\t: GPU [vendor:%s]: %s\n\t"
        "* [OpenGL] version : [%d.%d]",
        ( pcstr ) glGetString( GL_VENDOR ),
        ( pcstr ) glGetString( GL_RENDERER ), gl_major, gl_minor
            // , glewGetString( GLEW_VERSION )
    );

	glfwSwapInterval( 1 );

	glfwSetFramebufferSizeCallback          ( g_gl3_context, framebuffer_size_callback );
	glfwSetWindowSizeCallback				( g_gl3_context, windowSizeCallback );

	glfwShowWindow	( g_gl3_context);